using Godot;
using System;
using System.Collections.Generic;

public class Block
{
    public enum Type 
    {
        Air = -1,
        Stone = 0,
        Grass = 1,
        Dirt = 2,
        WestStone = 3,
        SonarOre = 4,
        OspiritOre = 5,
        BedRock = 6,
        WarningBlock = 7,
        IronBlock = 8,
    }
    
    public static Dictionary<Type, Drop> drops = new Dictionary<Type, Drop>
    {
        {Type.Air, null},
        {Type.Stone, new Drop(new Drop.Loot(Item.Type.Stone,1))},
        {Type.Grass, new Drop(new Drop.Loot(Item.Type.Dirt,1))},
        {Type.Dirt, new Drop(new Drop.Loot(Item.Type.Dirt,1))},
        {Type.WestStone, null},
        {Type.SonarOre, new Drop(new Drop.Loot(Item.Type.Sonar, 1))},
        {Type.OspiritOre, new Drop(new Drop.Loot(Item.Type.Composite, 1))},
        {Type.BedRock, new Drop(new Drop.Loot(Item.Type.Composite, 1))},
        {Type.WarningBlock, new Drop(new Drop.Loot(Item.Type.Composite, 1)) },
        {Type.IronBlock, new Drop(new Drop.Loot(Item.Type.Composite, 1))},
    };
    public static Dictionary<Type, float> durabilities = new Dictionary<Type, float>
    {
    
        {Type.Air, -1.0f},
        {Type.Stone, 100.0f},
        {Type.Grass, 40.0f},
        {Type.Dirt, 30.0f},
        {Type.WestStone, -1.0f},
        {Type.SonarOre, 200.0f},
        {Type.OspiritOre, 300.0f},
        {Type.BedRock, 10f},
        {Type.WarningBlock, 150f},
        {Type.IronBlock, 300f},
    };

    public static float healStrength = 10.0f;
    public static int GetIDTile(Type type)
    {
        return (int) type;
    }

    public static int cellSize = 16;
    /*
        Object :  Block

        /!\ Initialisation static : NON NECESSAIRE (Ps : A mettre a jour).
        /!\ Classe Initialisées necessaire : World

        Description de l'object :
            Un block est comme sont nom l'indique un block du monde.
            Un block d'Air est egalement un block.
            Chaque type de block posseble un id correspondant a l'id dans le tileset (a mettre a jour dans l'enumeration Type).
            Les coordonnées manipulées dans cette classe sont strictement globale (World).

        Description des parametres:
            int x,y : sont la position du block dans le Monde.
            Block.Type type : est le type de block correspondant au block lui meme
            bool isAutoGenerated : True si le block est issue de la generation automatique (et le reste meme si le type de block change)
                                   False sinon.
    */

    public int x,y;
    
    public Type type;
    public Type GetType => type;
        
    public float health;
    public bool isAutoGenerated;
    
    
    public Block(Type type, int x, int y, bool isAutoGenerated=false){
        this.x = x;
        this.y = y;
        this.type = type;
        this.isAutoGenerated = isAutoGenerated;
        health = durabilities[type];
    }

    public void SetType(Type type)
    {
        this.type = type;
        health = durabilities[type];
    }
    
    public void Damage(float damage)
    {
        if (durabilities[type] == -1) 
            return;
        health -= damage;
        if (health <= 0)
        {
            UI_breakingBlocks.RemoveUI(this);
            SpawnDrop();
            Remove();
        } else if (health < durabilities[type])
        {
            UI_breakingBlocks.AddUI(this);
        }
    }

    private void SpawnDrop()
    {
        World.IsInitWorldTest("SpawnLoot");
        foreach (var l in drops[type].loots)
        {
            Vector2 pos = new Vector2(x + ((float)World.random.NextDouble()*0.8f + 0.1f), y + ((float)World.random.NextDouble()*0.8f + 0.1f));
            Loot.SpawnLoot(pos, l.type, l.amount);
        }
    }
    
    public void Heal(float heal)
    {
        health += heal;
        if (health >= durabilities[type])
        {
            health = durabilities[type];
            UI_breakingBlocks.RemoveUI(this);
        }
    }
    
    public void Remove()
    {
        Chunk c = World.GetChunk(x);
        c.RemoveBlock(Chunk.GetLocaleX(x), y);
    }


    /*Static Fonctions*/
    public static bool IsAir(Block b) => b.type==Block.Type.Air;
    public static bool IsNotAir(Block b) => b.type!=Block.Type.Air;


}

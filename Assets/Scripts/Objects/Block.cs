using Godot;
using System;
using Godot.Collections;

public class Block
{
    public enum Type 
    {
        Air = -1,
        Stone = 0,
        Grass = 1,
        Dirt = 2
    }
    
    public static Dictionary<Type, float> durabilities = new Dictionary<Type, float>
    {
        {Type.Air, -1.0f},
        {Type.Stone, 100.0f},
        {Type.Grass, 15.0f},
        {Type.Dirt, 8.0f}
    };
    public static int GetIDTile(Type type)
    {
        return (int) type;
    }

    public static int cellSize = 16;
    /*
        Object :  Block

        /!\ Initialisation static : NON NECESSAIRE (Ps : A mettre a jour).
        /!\ Classe Initialisées necessaire : None

        Description de l'object :
            Un block est comme sont nom l'indique un block du monde.
            Un block d'Air est egalement un block.
            Chaque type de block posseble un id correspondant a l'id dans le tileset (a mettre a jour dans l'enumeration Type).
            Les coordonnées manipulées dans cette classe sont strictement globale (World).

        Description des parametres:
            int x,y : sont la position du block dans le Monde.
            Block.Type type : est le type de block correspondant au block lui meme
            bool isAutoGenerated : True si le block est issue de la generation automatique (et le reste meme si le type de block change)
                                   False sinon.
    */

    public int x,y;
    
    private Type type;
    public Type GetType => type;
        
    private float health;
    public bool isAutoGenerated;
    
    
    public Block(Type type, int x, int y, bool isAutoGenerated=false){
        this.x = x;
        this.y = y;
        this.type = type;
        this.isAutoGenerated = isAutoGenerated;
        health = durabilities[type];
    }

    public void SetType(Type type)
    {
        this.type = type;
        health = durabilities[type];
    }
    
    public void Damage(float damage)
    {
        health -= damage;
        if (health <= 0)
            Remove();
    }
    
    public void Remove()
    {
        Chunk c = World.GetChunk(x);
        c.RemoveBlock(Chunk.GetLocaleX(x), y);
    }


    /*Static Fonctions*/
    public static bool IsAir(Block b) => b.type==Block.Type.Air;
    public static bool IsNotAir(Block b) => b.type!=Block.Type.Air;


}
